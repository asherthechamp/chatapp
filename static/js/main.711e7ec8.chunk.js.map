{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["chatapp","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","fs","getFirestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","ChatMessage","props","message","text","uid","photoURL","messageClass","createdAt","currentUser","className","width","height","src","ChatRoom","dummy","useRef","messageRef","collection","q","query","orderBy","limit","items","useState","messages","setMessages","onSnapshot","querySnapshot","forEach","doc","push","data","console","log","formValue","setFromValue","sendMessage","e","a","preventDefault","addDoc","Date","current","scrollIntoView","behavior","map","msg","id","ref","value","onChange","target","onSubmit","type","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wQAiCMA,EAAUC,IAASC,cAjBF,CAOrBC,OAAQ,0CACRC,WAAY,oCACZC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMXC,EAAOC,YAAQX,GAEfY,EAAKC,YAAab,GAgBxB,SAASc,IAMP,OAAO,wBAAQC,QAJU,WACvB,IAAMC,EAAW,IAAIC,IACrBC,YAAgBR,EAAMM,IAEjB,mCAIT,SAASG,EAAYC,GAAQ,IAAD,EACeA,EAAMC,QAAxCC,EADmB,EACnBA,KAAMC,EADa,EACbA,IAAKC,EADQ,EACRA,SACZC,GAFoB,EACEC,UACPH,IAAQb,EAAKiB,YAAYJ,IAAM,OAAS,YAG7D,OAAQ,sBAAKK,UAAS,kBAAeH,GAA7B,UACN,4BAAIH,IACJ,qBAAKO,MAAO,IAAKC,OAAS,IAAKC,IAAKP,OAaxC,SAASQ,IAEP,IAAMC,EAAQC,mBACRC,EAAaC,YAAWxB,EAAI,YAE5ByB,EAAIC,YAAMH,EAAYI,YAAQ,aAAcC,YAAM,KAClDC,EAAQ,GANI,EAOcC,mBAAS,IAPvB,mBAOXC,EAPW,KAODC,EAPC,KAUlBC,YAAWR,GAAG,SAACS,GACbA,EAAcC,SAAQ,SAAAC,GACpBP,EAAMQ,KAAKD,EAAIE,WAGjBC,QAAQC,IAAIX,GACZG,EAAYH,MAhBI,MAqBiBC,qBArBjB,mBAqBVW,EArBU,KAqBCC,EArBD,KAuBXC,EAAW,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGMhD,EAAKiB,YAAtBJ,EAHW,EAGXA,IAAKC,EAHM,EAGNA,SAHM,SAKbmC,YAAOxB,EAAY,CACvBZ,MACFD,KAAM+B,EACN3B,UAAW,IAAIkC,KACfpC,aATmB,OAWlB8B,EAAa,IACbrB,EAAM4B,QAAQC,eAAe,CAACC,SAAU,WAZtB,2CAAH,sDAoBpB,OAEE,qCACA,iCACCpB,GAAYA,EAASqB,KAAI,SAACC,GAAD,OAAS,cAAC9C,EAAD,CAA4BE,QAAW4C,GAAnBA,EAAIC,OAC3D,qBAAKC,IAAOlC,EAAZ,kBAEA,uBAAMmC,MAASf,EAAWgB,SAAY,SAACb,GAAD,OAAOF,EAAaE,EAAEc,OAAOF,QAAQG,SAAYhB,EAAvF,UACA,0BACA,wBAAQiB,KAAK,SAAb,wCAOaC,MAvGf,WAAgB,IAAD,EAEAC,YAAahE,GAArBiE,EAFQ,oBAIb,OACE,qBAAK/C,UAAU,MAAf,SAGG+C,EAAO,cAAC3C,EAAD,IAAc,cAAClB,EAAD,OCnCb8D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAEL,cAAC,EAAD,IACDC,SAASC,eAAe,SAM3BZ,M","file":"static/js/main.711e7ec8.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nimport firebase from 'firebase/compat/app'\n// import { getAnalytics } from \"firebase/analytics\";\n\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nimport {useAuthState} from 'react-firebase-hooks/auth'\nimport {getAuth, GoogleAuthProvider, signInWithPopup} from 'firebase/auth'\nimport { getFirestore, query, orderBy, limit, onSnapshot, addDoc } from 'firebase/firestore';\nimport {collection} from 'firebase/firestore'\nimport { useState, useRef } from 'react';\n\nconst firebaseConfig = {\n  // Import the functions you need from the SDKs you need\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n  apiKey: \"AIzaSyDJmc_d2xiwHLDWjK-_FJqhOGoPf81GKSQ\",\n  authDomain: \"chatappproj-5ebe6.firebaseapp.com\",\n  projectId: \"chatappproj-5ebe6\",\n  storageBucket: \"chatappproj-5ebe6.appspot.com\",\n  messagingSenderId: \"327354501086\",\n  appId: \"1:327354501086:web:a58fa4bac76c7168b7bf4f\",\n  measurementId: \"G-N44RZE3R1Y\"\n\n// Initialize Firebase\n}\nconst chatapp = firebase.initializeApp(firebaseConfig)\n\nconst auth = getAuth(chatapp)\n\nconst fs = getFirestore(chatapp)\n\nfunction App() {\n\nconst [user] = useAuthState(auth)\n  \n  return (\n    <div className=\"App\">\n      \n        \n     { user ? <ChatRoom/> : <SignIn/>}\n        \n    </div>\n  );\n\n }\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new GoogleAuthProvider()\n    signInWithPopup(auth, provider)\n  }\n  return <button onClick = {signInWithGoogle} > Sign in with Google </button> \n  \n}\n\nfunction ChatMessage(props) {\n  const {text, uid, photoURL, createdAt} = props.message\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'recieved'\n\n\n  return (<div className = {`message ${messageClass}` }>\n    <p>{text}</p>\n    <img width={100} height ={100} src={photoURL}/>\n\n    \n    </div>)\n}\n\n\n\n\nfunction signOut() {\n  return auth.currentUser && (<button onClick = {() => auth.signOut()}> Sign Out</button>)\n}\n\nfunction ChatRoom() {  \n  \n  const dummy = useRef()\n  const messageRef = collection(fs, 'messages')\n\n  const q = query(messageRef, orderBy('createdAt'), limit(25) )\n  const items = []\n  const [messages, setMessages] = useState([])\n\n\n  onSnapshot(q, (querySnapshot) => {\n    querySnapshot.forEach(doc => {\n      items.push(doc.data())\n      \n    });\n    console.log(items)\n    setMessages(items)\n\n      \n   })\n\n   const [formValue, setFromValue] = useState()\n\n   const sendMessage = async(e) =>{\n     e.preventDefault()\n    \n     const {uid, photoURL} = auth.currentUser\n\n    await addDoc(messageRef, {\n      uid,\n    text: formValue,\n    createdAt: new Date(),\n    photoURL,\n     });;\n     setFromValue('')\n     dummy.current.scrollIntoView({behavior: 'smooth'})\n   }\n\n   \n    \n  \n  \n   \nreturn  (\n\n  <>\n  <main > \n  {messages && messages.map((msg) => <ChatMessage key = {msg.id} message = {msg}/>)}\n  <div ref = {dummy}> </div>\n  </main>\n  <form value = {formValue} onChange = {(e) => setFromValue(e.target.value)} onSubmit = {sendMessage}>\n  <input />\n  <button type='submit'> üïäÔ∏è </button>\n</form> \n</>)\n\n    \n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <App />\n,  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}